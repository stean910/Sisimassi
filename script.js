document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const toggleBtn = document.getElementById("toggleBtn");
    const slider = document.getElementById("slider");
    const progressContainer = document.getElementById("progressContainer");
    const foundMessage = document.getElementById("foundMessage");
    
    // –ó–≤—É–∫–∏
    const sounds = {
        click: document.getElementById("clickSound"),
        start: document.getElementById("startSound"),
        beep: document.getElementById("beepSound"),
        found: document.getElementById("foundSound")
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    let isActive = false;
    let isDragging = false;
    let progress = 0;
    let beepInterval;
    let touchStartTime = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤
        Object.values(sounds).forEach(sound => {
            sound.load();
            sound.volume = 1.0;
        });
        
        // –§–∏–∫—Å –±–∞–≥–∞ 10: —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞—á–∞ –∏ –∫–ª–∏–∫–∞
        toggleBtn.addEventListener('touchstart', handleTouchStart, { passive: true });
        toggleBtn.addEventListener('touchend', handleToggle, { passive: true });
        toggleBtn.addEventListener('click', handleToggle);
        
        // –§–∏–∫—Å –±–∞–≥–∞ 8: —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–æ–º
        slider.addEventListener('touchstart', handleSliderStart, { passive: false });
        progressContainer.addEventListener('touchmove', handleSliderMove, { passive: false });
        progressContainer.addEventListener('touchend', handleSliderEnd);
        
        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
        slider.addEventListener('mousedown', handleSliderStart);
        document.addEventListener('mousemove', handleSliderMove);
        document.addEventListener('mouseup', handleSliderEnd);
    }

    // –§–∏–∫—Å –±–∞–≥–∞ 10: –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    function handleTouchStart() {
        touchStartTime = Date.now();
    }

    function handleToggle(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–ø—ã (–º–µ–Ω–µ–µ 100ms)
        if (e.type === 'touchend' && Date.now() - touchStartTime < 100) return;
        
        e.preventDefault();
        sounds.click.play().catch(e => console.log("Sound error:", e));
        
        isActive = !isActive;
        toggleBtn.textContent = isActive ? "üîò –í–´–ö–õ" : "üîò –í–ö–õ";
        
        if (isActive) {
            sounds.start.play().then(() => {
                resetProgress();
            }).catch(e => {
                console.log("Start sound error:", e);
                resetProgress();
            });
        } else {
            stopGame();
        }
    }

    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª–∑—É–Ω–∫–∞ (—Ñ–∏–∫—Å –±–∞–≥–∞ 8)
    function handleSliderStart(e) {
        if (!isActive) return;
        isDragging = true;
        e.preventDefault();
        clearInterval(beepInterval);
        updateSliderPosition(e);
    }

    function handleSliderMove(e) {
        if (!isDragging || !isActive) return;
        e.preventDefault();
        updateSliderPosition(e);
    }

    function handleSliderEnd() {
        if (!isActive) return;
        isDragging = false;
        if (progress >= 100) {
            triggerFound();
        } else {
            startBeepInterval(); // –§–∏–∫—Å –±–∞–≥–∞ 9
        }
    }

    function updateSliderPosition(e) {
        const rect = progressContainer.getBoundingClientRect();
        const clientX = e.clientX || (e.touches[0] ? e.touches[0].clientX : 0);
        progress = Math.max(0, Math.min(100, ((clientX - rect.left) / rect.width) * 100));
        
        updateSlider();
        playBeepSound();
    }

    // –§–∏–∫—Å –±–∞–≥–∞ 9: –ø–ª–∞–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –±–∏–ø–æ–≤
    function startBeepInterval() {
        clearInterval(beepInterval);
        const baseDelay = 1000;
        // –ù–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö)
        const speedFactor = Math.max(0.1, 1 - (progress / 115));
        
        beepInterval = setInterval(() => {
            if (!isDragging && isActive) {
                sounds.beep.currentTime = 0;
                sounds.beep.play().catch(e => console.log("Beep error:", e));
            }
        }, baseDelay * speedFactor);
    }

    function playBeepSound() {
        if (progress % 15 < 3) {
            sounds.beep.currentTime = 0;
            sounds.beep.play().catch(e => console.log("Beep error:", e));
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // ... (updateSlider, triggerFound, resetProgress, stopGame)
    
    init();
});
